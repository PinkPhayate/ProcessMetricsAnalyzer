    public abstract class GlimpseDbProviderFactory : DbProviderFactory
    internal class AdoExecutionBlock : ExecutionBlockBase
    public abstract class AdoCommandMessage : AdoMessage
    public abstract class AdoMessage : ITimedMessage
    public abstract class AdoTransactionMessage : AdoMessage
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    internal class SqlStatistics
    internal static class SqlStatisticsCalculator
    internal class CommandParameterParser : ICommandParameterParser
    internal class CommandSanitizer
        public T GetInstance<T>() where T : class
        public ICollection<T> GetAllInstances<T>() where T : class
    public abstract class AspNetTab : TabBase<HttpContextBase>
    public abstract class HttpApplicationBase
    /// This class will inject some html snippet (most likely the Glimpse Client script tags, but it can be anything) in the resulting HTML output.
    /// An instance of this class should be assigned as a filter to the outgoing response so that the injection can be done once all the rendering is completed.
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    public sealed class Client : IDynamicClientScript
    public sealed class Data : IDynamicClientScript, IParameterValueProvider
//    public sealed class Insight : IDynamicClientScript
    public sealed class Metadata : IDynamicClientScript, IParameterValueProvider
    public sealed class ContentTypeElementCollection : ConfigurationElementCollection
        /// Initializes a new instance of the <see cref="ContentTypeElementCollection" /> class with <c>text/html</c>, <c>application/json</c> and <c>text/plain</c> added to the collection.
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
        /// Gets the element key for a specified configuration element when overridden in a derived class.
    internal class RegexConverter : ConfigurationConverterBase
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
        /// Gets the element key for a specified configuration element when overridden in a derived class.
    /// Before using, the <c>Section</c> class must be added to the <c>configSections</c> section of <c>web.config</c>, as shown in the examples. However, usually a NuGet package will make the necessary <c>web.config</c> changes automatically.
        /// Initializes a new instance of the <see cref="StatusCodeElementCollection" /> class with <c>200</c>, <c>301</c> and <c>302</c> added to the collection.
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
        /// Gets the element key for a specified configuration element when overridden in a derived class.
    internal class TypeConverter : ConfigurationConverterBase
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
        /// Gets the element key for a specified configuration element when overridden in a derived class.
    internal static class Constants
    public abstract class AlternateMethod : IAlternateMethod
        /// Initializes a new instance of the <see cref="AlternateMethod" /> class.
        /// Initializes a new instance of the <see cref="AlternateMethod" /> class.
        /// Initializes a new instance of the <see cref="AlternateMethod" /> class.
    public abstract class AlternateType<T> : IAlternateType<T> where T : class
        /// Initializes a new instance of the <see cref="AlternateType{T}" /> class.
        /// Initializes a new instance of the <see cref="AlternateTypeGenerationHook{T}" /> class.
        /// Initializes a new instance of the <see cref="AlternateTypeToCastleInterceptorAdapter" /> class.
        /// Initializes a new instance of the <see cref="CastleInvocationToAlternateMethodContextAdapter" /> class.
        /// Gets the method info on the target class.
        /// Initializes a new instance of the <see cref="DictionaryDataStoreAdapter" /> class.
        /// Initializes a new instance of the <see cref="ExecutionTimer" /> class.
    /// Definition for an alternate method which allows classes to be proxied.
        /// Gets the method info on the target class.
    /// This interface can be implemented on the same class as the <see cref="ITab"/>, but 
    /// typically it would be implemented on a different class for separation of concerns.
    /// supports wrapping a interfaces, wrapping a class or extending a class. 
    /// When selecting a class to wrap or extend, it is important to know what constructors
    /// When a method is called on a extended class, it is important to note that the new 
    /// class will behave differently to that of a wrapped classes. Meaning that if you have 
        T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        /// Determines whether the specified type is wrap class eligible.
        /// <returns><c>true</c> if [is wrap class eligible] [the specified type]; otherwise, <c>false</c>.</returns>
        /// Wraps the class.
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        /// Wraps the class.
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        /// Wraps the class.
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class;
        /// Determines whether the specified type is extend class eligible.
        /// <returns><c>true</c> if [is extend class eligible] [the specified type]; otherwise, <c>false</c>.</returns>
        /// Extends the class.
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        /// Extends the class.
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        /// Extends the class.
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class;
        T GetRequestContext<T>() where T : class;
    public interface IStaticClientScript : IClientScript // TODO: Provide a config only way to create static client scripts without implementing a class
        T GetRequestContext<T>() where T : class;
        /// Initializes a new instance of the <see cref="InspectorContext" /> class.
        /// Initializes a new instance of the <see cref="JsonNetSerializationConverterAdapter" /> class.
        /// Initializes a new instance of the <see cref="JsonNetSerializer" /> class.
    /// An abstract base class which provides <see cref="ILogger"/> implementations with message formatting abilities.
    public abstract class LoggerBase : ILogger
        /// Initializes a new instance of the <see cref="MessageBroker" /> class.
        /// Initializes a new instance of the <see cref="NLogLogger" /> class.
        /// Initializes a new instance of the <see cref="NuGetPackageAttribute" /> class.
        /// Initializes a new instance of the <see cref="NuGetPackageAttribute" /> class.
        /// Initializes a new instance of the <see cref="NuGetPackageAttribute" /> class.
        /// Initializes a new instance of the <see cref="ResourceContext" /> class.
        /// Initializes a new instance of the <see cref="ResourceParameterMetadata" /> class.
        /// Initializes a new instance of the <see cref="ResourceResultContext" /> class.
    public abstract class ResourceResultDecorator : IResourceResult, IWrapper<IResourceResult>
        /// Initializes a new instance of the <see cref="ResourceResultDecorator" /> class.
        /// Initializes a new instance of the <see cref="RuntimePolicyContext" /> class.
        public T GetRequestContext<T>() where T : class
    public abstract class SerializationConverter<T> : ISerializationConverter
    internal abstract class Subscriber
    internal class Subscriber<T> : Subscriber
    public abstract class TabBase : ITab
    public abstract class TabBase<T> : ITab
        /// Initializes a new instance of the <see cref="TabContext" /> class.
        public T GetRequestContext<T>() where T : class
        /// Initializes a new instance of the <see cref="TabSetupContext" /> class.
        /// Initializes a new instance of the <see cref="ApplicationPersistenceStore" /> class.
        /// Initializes a new instance of the <see cref="CastleDynamicProxyFactory" /> class.
        public T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class
        public T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        /// Determines whether the specified type eligible to be class wrapped.
        ///   <c>true</c> if the type of eligible for class wrapping; otherwise, <c>false</c>.
        /// Wraps the class.
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class
        /// Wraps the class.
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        /// Wraps the class.
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class
        /// Extends the class.
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations) where T : class
        /// Extends the class.
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        /// Extends the class.
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class
    internal class CastleDynamicProxyWrapper<T> : IWrapper<T>
    internal class Crc32 : HashAlgorithm
        /// Initializes a new instance of the <see cref="Factory" /> class without any <see cref="IServiceLocator"/> implementations.
        /// Initializes a new instance of the <see cref="Factory" /> class without a <see cref="IServiceLocator"/> implementation from the framework provider.
        /// Initializes a new instance of the <see cref="Factory" /> class.
        /// Initializes a new instance of the <see cref="Factory" /> class.
        private bool TrySingleInstanceFromServiceLocators<T>(out T instance) where T : class
        private bool TryAllInstancesFromServiceLocators<T>(out ICollection<T> instance) where T : class
        /// Initializes a new instance of the <see cref="GlimpseConfiguration" /> class.
        /// Initializes a new instance of the <see cref="GlimpseException" /> class.
        /// Initializes a new instance of the <see cref="GlimpseException" /> class.
        /// Initializes a new instance of the <see cref="GlimpseException" /> class.
        /// Initializes a new instance of the <see cref="GlimpseException" /> class.
    /// A class which describes Glimpse system metadata, as required by a client.
        /// Initializes a new instance of the <see cref="GlimpseMetadata" /> class.
    /// A class which describes a given Http request, along with the corresponding tab data gathered for that request.
        /// Initializes a new instance of the <see cref="GlimpseRequest" /> class.
        /// Initializes a new instance of the <see cref="GlimpseRequest" /> class.
        /// Initializes a new instance of the <see cref="GlimpseRequestHeaders" /> class.
        /// Initializes static members of the <see cref="GlimpseRuntime" /> class.
        /// Initializes a new instance of the <see cref="GlimpseRuntime" /> class.
                    frameworkProviderRuntimeContextType.IsSubclassOf(tab.RequestContextType) ||
        protected class RuntimeMessage : ITimelineMessage, ISourceMessage
        T GetInstance<T>() where T : class;
        ICollection<T> GetAllInstances<T>() where T : class;
        /// Initializes a new instance of the <see cref="ReflectionDiscoverableCollection{T}" /> class.
    public abstract class ResourceEndpointConfiguration
    /// A class which contains all the parameters, whether named or ordered, needed to execute a resource.
        /// Initializes a new instance of the <see cref="ResourceParameters" /> class with a set of named parameters.
        /// Initializes a new instance of the <see cref="ResourceParameters" /> class with a set of ordered parameters.
    /// Base class which encapsulates the logic to ensure that 
    public abstract class ExecutionBlockBase
        /// Initializes a new instance of the <see cref="TabResult" /> class.
        /// Initializes a new instance of the <see cref="TimelineEventModel"/> class.
        /// Initializes a new instance of the <see cref="ContentTypePolicy" /> class with an empty white list.
        /// Initializes a new instance of the <see cref="ContentTypePolicy" /> class with the provided <paramref name="contentTypeWhiteList"/>.
        /// Initializes a new instance of the <see cref="StatusCodePolicy" /> class with an empty white list.
        /// Initializes a new instance of the <see cref="StatusCodePolicy" /> class with the provided <paramref name="statusCodeWhiteList"/>.
        /// Initializes a new instance of the <see cref="UriPolicy" /> class with an empty black list.
        /// Initializes a new instance of the <see cref="UriPolicy" /> class with the provided <paramref name="uriBlackList"/>.
        /// Initializes a new instance of the <see cref="ClientResource" /> class.
        /// Initializes a new instance of the <see cref="ConfigurationResource"/> class
        private class PackageItem<T>
        private class PackageItemDetail
        /// Initializes a new instance of the <see cref="ConfigurationScriptResource" /> class.
        /// Initializes a new instance of the <see cref="ConfigurationStyleResource" /> class.
    public abstract class FileResource : IResource
            /// Initializes a new instance of the <see cref="EmbeddedResourceInfo"/> class
//        /// Initializes a new instance of the <see cref="ClientResource" /> class.
        /// Initializes a new instance of the <see cref="LogoResource" /> class.
        /// Initializes a new instance of the <see cref="LogosResource" /> class.
            var html = string.Format("<!DOCTYPE html><html><head><meta charset='utf-8'><title>Glimpse Popup</title></head><body class='glimpse-popup'>{0}</body></html>", scriptTags);
        /// Initializes a new instance of the <see cref="SpriteResource" /> class.
        /// Initializes a new instance of the <see cref="CacheControlDecorator" /> class.
        /// Initializes a new instance of the <see cref="CacheControlDecorator" /> class.
        /// Initializes a new instance of the <see cref="ExceptionResourceResult" /> class.
        /// Initializes a new instance of the <see cref="FileResourceResult" /> class.
        /// Initializes a new instance of the <see cref="HtmlResourceResult" /> class.
        /// Initializes a new instance of the <see cref="JsonResourceResult" /> class without a JsonP callback function.
        /// Initializes a new instance of the <see cref="JsonResourceResult" /> class.
        /// Initializes a new instance of the <see cref="RedirectResourceResult" /> class without any parameter values in the Uri template.
        /// Initializes a new instance of the <see cref="RedirectResourceResult" /> class.
        /// Initializes a new instance of the <see cref="StatusCodeResourceResult" /> class.
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
        /// Initializes a new instance of the <see cref="NuGetPackageDiscoveryResult"/> class.
        public TabLayoutCell Class(string className)
            if (string.IsNullOrEmpty(className))
                throw new ArgumentException("Class name must not be null or empty.", "className");
            ClassName = className;
        /// Initializes a new instance of the <see cref="TraceListener"/> class.
        /// Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
        /// <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        /// When overridden in a derived class, writes the specified message to the listener you create in the derived class.
        /// Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
        /// <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        /// Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
        /// Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
        /// <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        /// When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
        /// Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
        /// <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        /// Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
        /// Emits an error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
        /// Emits an error message and a detailed error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
    internal class GlimpseDbProviderServices : DbProviderServices
        private class ProviderInvariantName : IProviderInvariantName
    internal class EntityFrameworkExecutionBlock : ExecutionBlockBase
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
            private void Proxy<TFilter>(IList<TFilter> filters, AlternateType<TFilter> alternateImplementation) where TFilter : class
        // This class manages alternate implementations of both IValueProvider, IUnvalidatedValueProvider and IEnumerableValueProvider
        private class UnvalidatedEnumerableValueProvider : IUnvalidatedEnumerableValueProvider
        // This class is the alternate implementation for both .FindView() AND .FindPartialView()
        public void Add<T>(ValueProvider<T>.ContainsPrefix.Message message) where T : class
        public void Add<T>(ValueProvider<T>.GetValue.Message message) where T : class
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
        private void UpdateModelBinding<T>(ValueProvider<T>.ContainsPrefix.Message message, ITabSetupContext context) where T : class
        private void UpdateModelBinding<T>(ValueProvider<T>.GetValue.Message message, ITabSetupContext context) where T : class
        public sealed class NoCacheAttribute : ActionFilterAttribute
    static partial class SqlMapper
                il.Emit(OpCodes.Castclass, commandType);
        partial class Link<TKey, TValue> where TKey : class
        partial class CacheInfo
        public partial class Identity : IEquatable<Identity>
        partial class DontMap { }
        sealed partial class DapperTable
        sealed partial class DapperRowMetaObject : System.Dynamic.DynamicMetaObject
        sealed partial class DapperRow
            private sealed class DeadValue
        public partial class GridReader : IDisposable
    partial class DynamicParameters : SqlMapper.IDynamicParameters
        partial class ParamInfo
    /// This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
    sealed partial class DbString
    partial class FeatureSupport
    sealed partial class SimpleMemberMap : SqlMapper.IMemberMap
    sealed partial class DefaultTypeMap : SqlMapper.ITypeMap
    sealed partial class CustomPropertyTypeMap : SqlMapper.ITypeMap
    public partial class SqlMapper
    public partial class DynamicParameters
    public partial class DbString
    public partial class SimpleMemberMap
    public partial class DefaultTypeMap
    public partial class CustomPropertyTypeMap
    public partial class FeatureSupport
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    public partial class Genre
    public partial class Order
    public partial class ShoppingCart
                    // Generate a new random GUID using System.Guid class
        internal class ExternalLoginResult : ActionResult
    public sealed class InitializeSimpleMembershipAttribute : ActionFilterAttribute
        private class SimpleMembershipInitializer
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    public  class Genre
    public partial class ShoppingCart
                    // Generate a new random GUID using System.Guid class
        internal class ExternalLoginResult : ActionResult
    public sealed class InitializeSimpleMembershipAttribute : ActionFilterAttribute
        private class SimpleMembershipInitializer
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    public  class Genre
    public partial class ShoppingCart
                    // Generate a new random GUID using System.Guid class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class GetRouteDataRouteBaseShould<T>
    public abstract class GetRouteDataRouteShould<T>
            Assert.True(FrameworkProvider.RuntimeContext.GetType().IsSubclassOf(typeof (HttpContextBase)));
    internal class SerializableTestObject : ISerializable
    internal class NonSerializableTestObject
    internal class NonSerializableTestObjectWithToString : NonSerializableTestObject
        public static void VerifyAll<T>(this T obj) where T : class
        public static void Verify<T, TResult>(this T obj, Expression<Func<T, TResult>> expression) where T : class
        public static void Verify<T, TResult>(this T obj, Expression<Func<T, TResult>> expression, Times times) where T : class
        public static void Verify<T>(this T obj, Expression<Action<T>> expression) where T : class
        public static void Verify<T>(this T obj, Expression<Action<T>> expression, Times times) where T : class
        public static ISetup<T> Setup<T>(this T obj, Expression<Action<T>> expression) where T : class
        public static ISetup<T, TResult> Setup<T, TResult>(this T obj, Expression<Func<T, TResult>> expression) where T : class
        public static void VerifySet<T>(this T obj, Action<T> expression) where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "This class is only used to setup inheritance chains only used in these tests.")]
    public sealed class SealedSpecialDisposable : ISpecialDisposable
        private class GenericTab : TabBase<DummyObjectContext>
        private class TestingTab : TabBase
        public sealed class SealedTestProxy : ITestProxy
        private class ResourceExecutionAndResultingRuntimePolicyTestCase
        private class MyResourceWithDependencies : IResource, IDependOnResources
    internal class TestObjectWithException
    internal class TestObjectWithJsonAttributes
    internal class TestObjectAsISerializable : ISerializable
        private class ClientResourceWithBadResourceName : ClientResource
        private class FileResourceTester : FileResource
        private class DummyClass
        public T GetInstance<T>() where T : class
        public ICollection<T> GetAllInstances<T>() where T : class
// Uncomment this class to provide custom runtime policy for Glimpse
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ActionInvokerGetFiltersShould<T> where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ActionInvokerInvokeActionResultShould<T> where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ValueProviderContainsPrefixShould<T> where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ValueProviderGetValueArgumentShould<T> where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ValueProviderGetValueShould<T> where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    public abstract class ValueProviderShould<T> where T : class
    public partial class About : Page
    public partial class About
    public partial class Login : Page
    public partial class Login {
    public partial class Manage : System.Web.UI.Page
    public partial class Manage
    public partial class OpenAuthProviders : System.Web.UI.UserControl
    public partial class OpenAuthProviders
    public partial class Register : Page
    public partial class Register
    public partial class RegisterExternalLogin : System.Web.UI.Page
    public partial class RegisterExternalLogin
    public partial class AddToCart : System.Web.UI.Page
    public partial class AddToCart
    public partial class AdminPage : System.Web.UI.Page
    public partial class AdminPage {
    internal static class AuthConfig
    public partial class CheckoutCancel : System.Web.UI.Page
    public partial class CheckoutCancel
    public partial class CheckoutComplete : System.Web.UI.Page
    public partial class CheckoutComplete {
    public partial class CheckoutError : System.Web.UI.Page
    public partial class CheckoutError
    public partial class CheckoutReview : System.Web.UI.Page
    public partial class CheckoutReview {
    public partial class CheckoutStart : System.Web.UI.Page
    public partial class CheckoutStart
    public partial class Contact : Page
    public partial class Contact
    public partial class ListView : Page
    public partial class ListView {
    public partial class _Default : Page
    public partial class _Default
    public partial class ErrorPage : System.Web.UI.Page
    public partial class ErrorPage {
    public partial class FileUpload : System.Web.UI.Page
    public partial class FileUpload {
    public sealed class ExceptionUtility
public sealed class NVPCodec : NameValueCollection
                    // Generate a new random GUID using System.Guid class.     
    public partial class ProductDetails : System.Web.UI.Page
    public partial class ProductDetails {
    public partial class ProductList : System.Web.UI.Page
    public partial class ProductList {
    public partial class ShoppingCart : System.Web.UI.Page
    public partial class ShoppingCart {
    public partial class SiteMaster : MasterPage
    public partial class SiteMaster {
    public partial class EmptyControls : System.Web.UI.Page
    public partial class EmptyControls {
    public partial class PopulatedControls : System.Web.UI.Page
    public partial class PopulatedControls {
    public partial class Viewstateless : System.Web.UI.Page
    public partial class Viewstateless {
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
        private class TempListItem
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    public abstract class WindowsAzureStorageInspectorBase
    internal class IPAddressConverter : JsonConverter
    internal class IPEndPointConverter : JsonConverter
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    public partial class Default : System.Web.UI.Page
    public partial class Default
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    internal class Resources {
        ///   Returns the cached ResourceManager instance used by this class.
        ///   resource lookups using this strongly typed resource class.
    class Program
