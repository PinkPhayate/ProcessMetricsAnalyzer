    internal class AdoExecutionBlock : ExecutionBlockBase
    internal class Resources {
    internal class SqlStatistics
    internal static class SqlStatisticsCalculator
    internal class CommandParameterParser : ICommandParameterParser
    internal class CommandSanitizer
        public T GetInstance<T>() where T : class
        public ICollection<T> GetAllInstances<T>() where T : class
    internal class Resources {
    internal class RegexConverter : ConfigurationConverterBase
    internal class TypeConverter : ConfigurationConverterBase
    internal static class Constants
        T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class;
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations) where T : class;
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class;
        T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class;
        T GetRequestContext<T>() where T : class;
        T GetRequestContext<T>() where T : class;
        public T GetRequestContext<T>() where T : class
    internal abstract class Subscriber
    internal class Subscriber<T> : Subscriber
        public T GetRequestContext<T>() where T : class
        public T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class
        public T WrapInterface<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations) where T : class
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        public T WrapClass<T>(T instance, IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations) where T : class
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins) where T : class
        public T ExtendClass<T>(IEnumerable<IAlternateMethod> methodImplementations, IEnumerable<object> mixins, IEnumerable<object> constructorArguments) where T : class
    internal class CastleDynamicProxyWrapper<T> : IWrapper<T>
    internal class Crc32 : HashAlgorithm
        private bool TrySingleInstanceFromServiceLocators<T>(out T instance) where T : class
        private bool TryAllInstancesFromServiceLocators<T>(out ICollection<T> instance) where T : class
                    frameworkProviderRuntimeContextType.IsSubclassOf(tab.RequestContextType) ||
        protected class RuntimeMessage : ITimelineMessage, ISourceMessage
        T GetInstance<T>() where T : class;
        ICollection<T> GetAllInstances<T>() where T : class;
        private class PackageItem<T>
        private class PackageItemDetail
            var html = string.Format("<!DOCTYPE html><html><head><meta charset='utf-8'><title>Glimpse Popup</title></head><body class='glimpse-popup'>{0}</body></html>", scriptTags);
    internal class Resources {
        public TabLayoutCell Class(string className)
            if (string.IsNullOrEmpty(className))
                throw new ArgumentException("Class name must not be null or empty.", "className");
            ClassName = className;
    internal class GlimpseDbProviderServices : DbProviderServices
        private class ProviderInvariantName : IProviderInvariantName
    internal class EntityFrameworkExecutionBlock : ExecutionBlockBase
    internal class Resources {
            private void Proxy<TFilter>(IList<TFilter> filters, AlternateType<TFilter> alternateImplementation) where TFilter : class
        private class UnvalidatedEnumerableValueProvider : IUnvalidatedEnumerableValueProvider
        public void Add<T>(ValueProvider<T>.ContainsPrefix.Message message) where T : class
        public void Add<T>(ValueProvider<T>.GetValue.Message message) where T : class
    internal class Resources {
        private void UpdateModelBinding<T>(ValueProvider<T>.ContainsPrefix.Message message, ITabSetupContext context) where T : class
        private void UpdateModelBinding<T>(ValueProvider<T>.GetValue.Message message, ITabSetupContext context) where T : class
    static partial class SqlMapper
                il.Emit(OpCodes.Castclass, commandType);
        partial class Link<TKey, TValue> where TKey : class
        partial class CacheInfo
        partial class DontMap { }
        sealed partial class DapperTable
        sealed partial class DapperRowMetaObject : System.Dynamic.DynamicMetaObject
        sealed partial class DapperRow
            private sealed class DeadValue
    partial class DynamicParameters : SqlMapper.IDynamicParameters
        partial class ParamInfo
    sealed partial class DbString
    partial class FeatureSupport
    sealed partial class SimpleMemberMap : SqlMapper.IMemberMap
    sealed partial class DefaultTypeMap : SqlMapper.ITypeMap
    sealed partial class CustomPropertyTypeMap : SqlMapper.ITypeMap
        internal class ExternalLoginResult : ActionResult
        private class SimpleMembershipInitializer
    public  class Genre
        internal class ExternalLoginResult : ActionResult
        private class SimpleMembershipInitializer
    public  class Genre
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
            Assert.True(FrameworkProvider.RuntimeContext.GetType().IsSubclassOf(typeof (HttpContextBase)));
    internal class SerializableTestObject : ISerializable
    internal class NonSerializableTestObject
    internal class NonSerializableTestObjectWithToString : NonSerializableTestObject
        public static void VerifyAll<T>(this T obj) where T : class
        public static void Verify<T, TResult>(this T obj, Expression<Func<T, TResult>> expression) where T : class
        public static void Verify<T, TResult>(this T obj, Expression<Func<T, TResult>> expression, Times times) where T : class
        public static void Verify<T>(this T obj, Expression<Action<T>> expression) where T : class
        public static void Verify<T>(this T obj, Expression<Action<T>> expression, Times times) where T : class
        public static ISetup<T> Setup<T>(this T obj, Expression<Action<T>> expression) where T : class
        public static ISetup<T, TResult> Setup<T, TResult>(this T obj, Expression<Func<T, TResult>> expression) where T : class
        public static void VerifySet<T>(this T obj, Action<T> expression) where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "This class is only used to setup inheritance chains only used in these tests.")]
        private class GenericTab : TabBase<DummyObjectContext>
        private class TestingTab : TabBase
        private class ResourceExecutionAndResultingRuntimePolicyTestCase
        private class MyResourceWithDependencies : IResource, IDependOnResources
    internal class TestObjectWithException
    internal class TestObjectWithJsonAttributes
    internal class TestObjectAsISerializable : ISerializable
        private class ClientResourceWithBadResourceName : ClientResource
        private class FileResourceTester : FileResource
        private class DummyClass
        public T GetInstance<T>() where T : class
        public ICollection<T> GetAllInstances<T>() where T : class
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below.")]
    internal static class AuthConfig
    internal class Resources {
        private class TempListItem
    internal class Resources {
    internal class Resources {
    internal class IPAddressConverter : JsonConverter
    internal class IPEndPointConverter : JsonConverter
    internal class Resources {
    internal class Resources {
    class Program
